//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     Returns the total number of unique address that have coins.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addressCount(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        addressCountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the total number of unique address that have coins.
     - GET /api/v1/addresscount
     - returns: RequestBuilder<Any> 
     */
    open class func addressCountWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/api/v1/addresscount"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter address: (query) address to filter by 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addressUxouts(address: String, completion: @escaping ((_ data: [InlineResponse200]?,_ error: Error?) -> Void)) {
        addressUxoutsWithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/address_uxouts
     - Returns the historical, spent outputs associated with an address
     - parameter address: (query) address to filter by 
     - returns: RequestBuilder<[InlineResponse200]> 
     */
    open class func addressUxoutsWithRequestBuilder(address: String) -> RequestBuilder<[InlineResponse200]> {
        let path = "/api/v1/address_uxouts"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address
        ])

        let requestBuilder: RequestBuilder<[InlineResponse200]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     
     - parameter addrs: (query) command separated list of addresses 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func balanceGet(addrs: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        balanceGetWithRequestBuilder(addrs: addrs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     - GET /api/v1/balance
     - parameter addrs: (query) command separated list of addresses 
     - returns: RequestBuilder<Any> 
     */
    open class func balanceGetWithRequestBuilder(addrs: String) -> RequestBuilder<Any> {
        let path = "/api/v1/balance"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addrs": addrs
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     
     - parameter addrs: (query) command separated list of addresses 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func balancePost(addrs: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        balancePostWithRequestBuilder(addrs: addrs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     - POST /api/v1/balance
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter addrs: (query) command separated list of addresses 
     - returns: RequestBuilder<Any> 
     */
    open class func balancePostWithRequestBuilder(addrs: String) -> RequestBuilder<Any> {
        let path = "/api/v1/balance"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addrs": addrs
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter hash: (query)  (optional)
     - parameter seq: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func block(hash: String? = nil, seq: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        blockWithRequestBuilder(hash: hash, seq: seq).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/block
     - Returns a block by hash or seq. Note: only one of hash or seq is allowed
     - parameter hash: (query)  (optional)
     - parameter seq: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func blockWithRequestBuilder(hash: String? = nil, seq: Int? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/block"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": hash, 
            "seq": seq?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the blockchain metadata.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blockchainMetadata(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        blockchainMetadataWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the blockchain metadata.
     - GET /api/v1/blockchain/metadata
     - returns: RequestBuilder<Any> 
     */
    open class func blockchainMetadataWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/api/v1/blockchain/metadata"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the blockchain sync progress.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blockchainProgress(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        blockchainProgressWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the blockchain sync progress.
     - GET /api/v1/blockchain/progress
     - returns: RequestBuilder<Any> 
     */
    open class func blockchainProgressWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/api/v1/blockchain/progress"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     blocksHandler returns blocks between a start and end point,
     
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter seqs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blocksGet(start: Int? = nil, end: Int? = nil, seqs: [Int]? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        blocksGetWithRequestBuilder(start: start, end: end, seqs: seqs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     blocksHandler returns blocks between a start and end point,
     - GET /api/v1/blocks
     - or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter seqs: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func blocksGetWithRequestBuilder(start: Int? = nil, end: Int? = nil, seqs: [Int]? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/blocks"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "seqs": seqs
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     blocksHandler returns blocks between a start and end point,
     
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter seqs: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blocksPost(start: Int? = nil, end: Int? = nil, seqs: [Int]? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        blocksPostWithRequestBuilder(start: start, end: end, seqs: seqs).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     blocksHandler returns blocks between a start and end point,
     - POST /api/v1/blocks
     - or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter start: (query)  (optional)
     - parameter end: (query)  (optional)
     - parameter seqs: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func blocksPostWithRequestBuilder(start: Int? = nil, end: Int? = nil, seqs: [Int]? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/blocks"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "end": end?.encodeToJSON(), 
            "seqs": seqs
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func coinSupply(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        coinSupplyWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/v1/coinSupply
     - coinSupplyHandler returns coin distribution supply stats
     - responseHeaders: [current_supply(String), total_supply(String), total_coinhour_supply(String), current_coinhour_supply(String), locked_distribution_addresses([String]), max_supply(String), unlocked_distribution_addresses([String])]
     - returns: RequestBuilder<Void> 
     */
    open class func coinSupplyWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v1/coinSupply"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = skyapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func csrf(completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        csrfWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     - GET /api/v1/csrf
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func csrfWithRequestBuilder() -> RequestBuilder<InlineResponse2001> {
        let path = "/api/v1/csrf"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func defaultConnections(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        defaultConnectionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     - GET /api/v1/network/defaultConnections
     - returns: RequestBuilder<[String]> 
     */
    open class func defaultConnectionsWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/api/v1/network/defaultConnections"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter address: (query) tags to filter by (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func explorerAddress(address: String? = nil, completion: @escaping ((_ data: [InlineResponse2002]?,_ error: Error?) -> Void)) {
        explorerAddressWithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/explorer/address
     - Returns all transactions (confirmed and unconfirmed) for an address
     - parameter address: (query) tags to filter by (optional)
     - returns: RequestBuilder<[InlineResponse2002]> 
     */
    open class func explorerAddressWithRequestBuilder(address: String? = nil) -> RequestBuilder<[InlineResponse2002]> {
        let path = "/api/v1/explorer/address"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address
        ])

        let requestBuilder: RequestBuilder<[InlineResponse2002]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns node health data.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func health(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        healthWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns node health data.
     - GET /api/v1/health
     - returns: RequestBuilder<Any> 
     */
    open class func healthWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/api/v1/health"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter num: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lastBlocks(num: Int, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        lastBlocksWithRequestBuilder(num: num).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/last_blocks
     - Returns the most recent N blocks on the blockchain
     - parameter num: (query)  
     - returns: RequestBuilder<Any> 
     */
    open class func lastBlocksWithRequestBuilder(num: Int) -> RequestBuilder<Any> {
        let path = "/api/v1/last_blocks"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "num": num.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     This endpoint returns a specific connection.
     
     - parameter addr: (query) Address port 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func networkConnection(addr: String, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        networkConnectionWithRequestBuilder(addr: addr).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     This endpoint returns a specific connection.
     - GET /api/v1/network/connection
     - parameter addr: (query) Address port 
     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func networkConnectionWithRequestBuilder(addr: String) -> RequestBuilder<InlineResponse2003> {
        let path = "/api/v1/network/connection"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addr": addr
        ])

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter states
     */
    public enum States_networkConnections: String {
        case pending = "pending"
        case connected = "connected"
        case introduced = "introduced"
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_networkConnections: String {
        case connected = "connected"
        case introduced = "introduced"
    }

    /**
     This endpoint returns all outgoings connections.
     
     - parameter states: (query) Connection status. (optional)
     - parameter direction: (query) Direction of the connection. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func networkConnections(states: States_networkConnections? = nil, direction: Direction_networkConnections? = nil, completion: @escaping ((_ data: [InlineResponse2003]?,_ error: Error?) -> Void)) {
        networkConnectionsWithRequestBuilder(states: states, direction: direction).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     This endpoint returns all outgoings connections.
     - GET /api/v1/network/connections
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter states: (query) Connection status. (optional)
     - parameter direction: (query) Direction of the connection. (optional)
     - returns: RequestBuilder<[InlineResponse2003]> 
     */
    open class func networkConnectionsWithRequestBuilder(states: States_networkConnections? = nil, direction: Direction_networkConnections? = nil) -> RequestBuilder<[InlineResponse2003]> {
        let path = "/api/v1/network/connections"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "states": states?.rawValue, 
            "direction": direction?.rawValue
        ])

        let requestBuilder: RequestBuilder<[InlineResponse2003]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (query) Address id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func networkConnectionsDisconnect(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        networkConnectionsDisconnectWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/v1/network/connection/disconnect
     - This endpoint disconnects a connection by ID or address
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (query) Address id. 
     - returns: RequestBuilder<Void> 
     */
    open class func networkConnectionsDisconnectWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        let path = "/api/v1/network/connection/disconnect"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<Void>.Type = skyapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func networkConnectionsExchange(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        networkConnectionsExchangeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/network/connections/exchange
     - This endpoint returns all connections found through peer exchange
     - returns: RequestBuilder<[String]> 
     */
    open class func networkConnectionsExchangeWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/api/v1/network/connections/exchange"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func networkConnectionsTrust(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        networkConnectionsTrustWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     - GET /api/v1/network/connections/trust
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - returns: RequestBuilder<[String]> 
     */
    open class func networkConnectionsTrustWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/api/v1/network/connections/trust"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     
     - parameter address: (query)  (optional)
     - parameter hash: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outputsGet(address: [String]? = nil, hash: [String]? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        outputsGetWithRequestBuilder(address: address, hash: hash).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     - GET /api/v1/outputs
     - parameter address: (query)  (optional)
     - parameter hash: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func outputsGetWithRequestBuilder(address: [String]? = nil, hash: [String]? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/outputs"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address, 
            "hash": hash
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     
     - parameter address: (query)  (optional)
     - parameter hash: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outputsPost(address: String? = nil, hash: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        outputsPostWithRequestBuilder(address: address, hash: hash).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     - POST /api/v1/outputs
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter address: (query)  (optional)
     - parameter hash: (query)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func outputsPostWithRequestBuilder(address: String? = nil, hash: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/outputs"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address, 
            "hash": hash
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pendingTxs(completion: @escaping ((_ data: [InlineResponse2004]?,_ error: Error?) -> Void)) {
        pendingTxsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/pendingTxs
     - Returns pending (unconfirmed) transactions without verbose
     - returns: RequestBuilder<[InlineResponse2004]> 
     */
    open class func pendingTxsWithRequestBuilder() -> RequestBuilder<[InlineResponse2004]> {
        let path = "/api/v1/pendingTxs"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2004]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendUnconfirmedTxns(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resendUnconfirmedTxnsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/v1/resendUnconfirmedTxns
     - Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - returns: RequestBuilder<Void> 
     */
    open class func resendUnconfirmedTxnsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v1/resendUnconfirmedTxns"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = skyapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the top skycoin holders.
     
     - parameter includeDistribution: (query) include distribution addresses or not, default value false (optional)
     - parameter n: (query) include distribution addresses or not, default value false (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func richlist(includeDistribution: Bool? = nil, n: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        richlistWithRequestBuilder(includeDistribution: includeDistribution, n: n).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the top skycoin holders.
     - GET /api/v1/richlist
     - parameter includeDistribution: (query) include distribution addresses or not, default value false (optional)
     - parameter n: (query) include distribution addresses or not, default value false (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func richlistWithRequestBuilder(includeDistribution: Bool? = nil, n: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/richlist"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include-distribution": includeDistribution, 
            "n": n
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter txid: (query) transaction hash 
     - parameter encoded: (query) return as a raw encoded transaction. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transaction(txid: String, encoded: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        transactionWithRequestBuilder(txid: txid, encoded: encoded).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/transaction
     - Returns a transaction identified by its txid hash with just id
     - parameter txid: (query) transaction hash 
     - parameter encoded: (query) return as a raw encoded transaction. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func transactionWithRequestBuilder(txid: String, encoded: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/transaction"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "txid": txid, 
            "encoded": encoded
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Broadcast a hex-encoded, serialized transaction to the network.
     
     - parameter rawtx: (header) hex-encoded serialized transaction string. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transactionInject(rawtx: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        transactionInjectWithRequestBuilder(rawtx: rawtx).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Broadcast a hex-encoded, serialized transaction to the network.
     - POST /api/v2/transaction/inject
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter rawtx: (header) hex-encoded serialized transaction string. 
     - returns: RequestBuilder<Any> 
     */
    open class func transactionInjectWithRequestBuilder(rawtx: String) -> RequestBuilder<Any> {
        let path = "/api/v2/transaction/inject"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "rawtx": rawtx
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     
     - parameter txid: (query) Transaction id hash (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transactionRaw(txid: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        transactionRawWithRequestBuilder(txid: txid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     - GET /api/v2/transaction/raw
     - parameter txid: (query) Transaction id hash (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func transactionRawWithRequestBuilder(txid: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v2/transaction/raw"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "txid": txid
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transactionVerify(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        transactionVerifyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/v2/transaction/verify
     - Decode and verify an encoded transaction
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - returns: RequestBuilder<Any> 
     */
    open class func transactionVerifyWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/api/v2/transaction/verify"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns transactions that match the filters.
     
     - parameter addrs: (query) command separated list of addresses (optional)
     - parameter confirmed: (query) Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transactionsGet(addrs: String? = nil, confirmed: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        transactionsGetWithRequestBuilder(addrs: addrs, confirmed: confirmed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns transactions that match the filters.
     - GET /api/v1/transactions
     - parameter addrs: (query) command separated list of addresses (optional)
     - parameter confirmed: (query) Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func transactionsGetWithRequestBuilder(addrs: String? = nil, confirmed: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/transactions"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addrs": addrs, 
            "confirmed": confirmed
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns transactions that match the filters.
     
     - parameter addrs: (query) command separated list of addresses (optional)
     - parameter confirmed: (query) Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transactionsPost(addrs: String? = nil, confirmed: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        transactionsPostWithRequestBuilder(addrs: addrs, confirmed: confirmed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns transactions that match the filters.
     - POST /api/v1/transactions
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter addrs: (query) command separated list of addresses (optional)
     - parameter confirmed: (query) Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func transactionsPostWithRequestBuilder(addrs: String? = nil, confirmed: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/transactions"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addrs": addrs, 
            "confirmed": confirmed
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns an unspent output by ID.
     
     - parameter uxid: (query) uxid to filter by (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uxout(uxid: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        uxoutWithRequestBuilder(uxid: uxid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns an unspent output by ID.
     - GET /api/v1/uxout
     - parameter uxid: (query) uxid to filter by (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func uxoutWithRequestBuilder(uxid: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/uxout"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "uxid": uxid
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Verifies a Skycoin address.
     
     - parameter address: (query) Address id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyAddress(address: String, completion: @escaping ((_ data: InlineResponse2007?,_ error: Error?) -> Void)) {
        verifyAddressWithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verifies a Skycoin address.
     - POST /api/v2/address/verify
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter address: (query) Address id. 
     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func verifyAddressWithRequestBuilder(address: String) -> RequestBuilder<InlineResponse2007> {
        let path = "/api/v2/address/verify"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": address
        ])

        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func version(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        versionWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/v1/version
     - versionHandler returns the application version info
     - responseHeaders: [commit(String), branch(String), version(String)]
     - returns: RequestBuilder<Void> 
     */
    open class func versionWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v1/version"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = skyapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a wallet by id.
     
     - parameter _id: (query) tags to filter by 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wallet(_id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a wallet by id.
     - GET /api/v1/wallet
     - parameter _id: (query) tags to filter by 
     - returns: RequestBuilder<Any> 
     */
    open class func walletWithRequestBuilder(_id: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     
     - parameter _id: (query) tags to filter by 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletBalance(_id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletBalanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     - GET /api/v1/wallet/balance
     - parameter _id: (query) tags to filter by 
     - returns: RequestBuilder<Any> 
     */
    open class func walletBalanceWithRequestBuilder(_id: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/balance"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter seed: (header) Wallet seed. 
     - parameter label: (header) Wallet label. 
     - parameter scan: (header) The number of addresses to scan ahead for balances. (optional)
     - parameter encrypt: (header) Encrypt wallet. (optional)
     - parameter password: (header) Wallet Password (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletCreate(seed: String, label: String, scan: Int? = nil, encrypt: Bool? = nil, password: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletCreateWithRequestBuilder(seed: seed, label: label, scan: scan, encrypt: encrypt, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/v1/wallet/create
     - Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter seed: (header) Wallet seed. 
     - parameter label: (header) Wallet label. 
     - parameter scan: (header) The number of addresses to scan ahead for balances. (optional)
     - parameter encrypt: (header) Encrypt wallet. (optional)
     - parameter password: (header) Wallet Password (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func walletCreateWithRequestBuilder(seed: String, label: String, scan: Int? = nil, encrypt: Bool? = nil, password: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/create"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "seed": seed,
            "label": label,
            "scan": scan?.encodeToJSON(),
            "encrypt": encrypt,
            "password": password
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Decrypts wallet.
     
     - parameter _id: (header) Wallet id. 
     - parameter password: (header) Wallet password. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletDecrypt(_id: String, password: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletDecryptWithRequestBuilder(_id: _id, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Decrypts wallet.
     - POST /api/v1/wallet/decrypt
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (header) Wallet id. 
     - parameter password: (header) Wallet password. 
     - returns: RequestBuilder<Any> 
     */
    open class func walletDecryptWithRequestBuilder(_id: String, password: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/decrypt"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "id": _id,
            "password": password
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Encrypt wallet.
     
     - parameter _id: (header) Wallet id. 
     - parameter password: (header) Wallet password. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletEncrypt(_id: String, password: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletEncryptWithRequestBuilder(_id: _id, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Encrypt wallet.
     - POST /api/v1/wallet/encrypt
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (header) Wallet id. 
     - parameter password: (header) Wallet password. 
     - returns: RequestBuilder<Any> 
     */
    open class func walletEncryptWithRequestBuilder(_id: String, password: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/encrypt"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "id": _id,
            "password": password
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter addr: (query) Address port 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletFolder(addr: String, completion: @escaping ((_ data: InlineResponse2006?,_ error: Error?) -> Void)) {
        walletFolderWithRequestBuilder(addr: addr).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/wallets/folderName
     - Returns the wallet directory path
     - parameter addr: (query) Address port 
     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func walletFolderWithRequestBuilder(addr: String) -> RequestBuilder<InlineResponse2006> {
        let path = "/api/v1/wallets/folderName"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addr": addr
        ])

        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (query) Wallet Id 
     - parameter num: (query) The number you want to generate (optional)
     - parameter password: (query) Wallet Password (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletNewAddress(_id: String, num: String? = nil, password: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletNewAddressWithRequestBuilder(_id: _id, num: num, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/v1/wallet/newAddress
     - Generates new addresses
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (query) Wallet Id 
     - parameter num: (query) The number you want to generate (optional)
     - parameter password: (query) Wallet Password (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func walletNewAddressWithRequestBuilder(_id: String, num: String? = nil, password: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/newAddress"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id, 
            "num": num, 
            "password": password
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter entropy
     */
    public enum Entropy_walletNewSeed: String {
        case _128 = "128"
        case _256 = "256"
    }

    /**

     - parameter entropy: (query) Entropy bitSize. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletNewSeed(entropy: Entropy_walletNewSeed? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletNewSeedWithRequestBuilder(entropy: entropy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/wallet/newSeed
     - Returns the wallet directory path
     - parameter entropy: (query) Entropy bitSize. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func walletNewSeedWithRequestBuilder(entropy: Entropy_walletNewSeed? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/newSeed"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "entropy": entropy?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     
     - parameter _id: (header) Wallet id. 
     - parameter seed: (header) Wallet seed. 
     - parameter password: (header) Wallet password. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletRecover(_id: String, seed: String, password: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletRecoverWithRequestBuilder(_id: _id, seed: seed, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     - POST /api/v2/wallet/recover
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (header) Wallet id. 
     - parameter seed: (header) Wallet seed. 
     - parameter password: (header) Wallet password. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func walletRecoverWithRequestBuilder(_id: String, seed: String, password: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v2/wallet/recover"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "id": _id,
            "seed": seed,
            "password": password
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     
     - parameter _id: (query) Wallet Id. 
     - parameter password: (query) Wallet password. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletSeed(_id: String, password: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletSeedWithRequestBuilder(_id: _id, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     - POST /api/v1/wallet/seed
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (query) Wallet Id. 
     - parameter password: (query) Wallet password. 
     - returns: RequestBuilder<Any> 
     */
    open class func walletSeedWithRequestBuilder(_id: String, password: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/seed"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id, 
            "password": password
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Verifies a wallet seed.
     
     - parameter seed: (header) Seed to be verified. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletSeedVerify(seed: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletSeedVerifyWithRequestBuilder(seed: seed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verifies a wallet seed.
     - POST /api/v2/wallet/seed/verify
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter seed: (header) Seed to be verified. (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func walletSeedVerifyWithRequestBuilder(seed: String? = nil) -> RequestBuilder<Any> {
        let path = "/api/v2/wallet/seed/verify"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "seed": seed
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter _id: (header) Wallet id 
     - parameter dst: (header) Recipient address 
     - parameter coins: (header) Number of coins to spend, in droplets. 1 coin equals 1e6 droplets. 
     - parameter password: (header) Wallet password. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletSpent(_id: String, dst: String, coins: String, password: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletSpentWithRequestBuilder(_id: _id, dst: dst, coins: coins, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/v1/wallet/spend
     - Creates and broadcasts a transaction sending money from one of our wallets to destination address.
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (header) Wallet id 
     - parameter dst: (header) Recipient address 
     - parameter coins: (header) Number of coins to spend, in droplets. 1 coin equals 1e6 droplets. 
     - parameter password: (header) Wallet password. 
     - returns: RequestBuilder<Any> 
     */
    open class func walletSpentWithRequestBuilder(_id: String, dst: String, coins: String, password: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/spend"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "id": _id,
            "dst": dst,
            "coins": coins,
            "password": password
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter inlineObject: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletTransaction(inlineObject: InlineObject? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletTransactionWithRequestBuilder(inlineObject: inlineObject).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/v1/wallet/transaction
     - Creates a signed transaction
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter inlineObject: (body)  (optional)
     - returns: RequestBuilder<Any> 
     */
    open class func walletTransactionWithRequestBuilder(inlineObject: InlineObject? = nil) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/transaction"
        let URLString = skyapiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter _id: (query) Wallet id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletTransactions(_id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        walletTransactionsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/wallet/transactions
     - Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
     - parameter _id: (query) Wallet id. 
     - returns: RequestBuilder<Any> 
     */
    open class func walletTransactionsWithRequestBuilder(_id: String) -> RequestBuilder<Any> {
        let path = "/api/v1/wallet/transactions"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<Any>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unloads wallet from the wallet service.
     
     - parameter _id: (query) Wallet Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletUnload(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        walletUnloadWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unloads wallet from the wallet service.
     - POST /api/v1/wallet/unload
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (query) Wallet Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func walletUnloadWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        let path = "/api/v1/wallet/unload"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<Void>.Type = skyapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the wallet.
     
     - parameter _id: (header) Wallet Id. 
     - parameter label: (header) The label the wallet will be updated to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func walletUpdate(_id: String, label: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        walletUpdateWithRequestBuilder(_id: _id, label: label).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update the wallet.
     - POST /api/v1/wallet/update
     - API Key:
       - type: apiKey X-CSRF-TOKEN 
       - name: csrfAuth
     - parameter _id: (header) Wallet Id. 
     - parameter label: (header) The label the wallet will be updated to. 
     - returns: RequestBuilder<Void> 
     */
    open class func walletUpdateWithRequestBuilder(_id: String, label: String) -> RequestBuilder<Void> {
        let path = "/api/v1/wallet/update"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "id": _id,
            "label": label
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = skyapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func wallets(completion: @escaping ((_ data: [InlineResponse2005]?,_ error: Error?) -> Void)) {
        walletsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/v1/wallets
     - Returns all loaded wallets
     - returns: RequestBuilder<[InlineResponse2005]> 
     */
    open class func walletsWithRequestBuilder() -> RequestBuilder<[InlineResponse2005]> {
        let path = "/api/v1/wallets"
        let URLString = skyapiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[InlineResponse2005]>.Type = skyapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
